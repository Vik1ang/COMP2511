diff --git a/tute08/src/fs/ui/FilePathTreeItem.java b/tute08/src/fs/ui/FilePathTreeItem.java
index 0187712..b2d6b7c 100644
--- a/tute08/src/fs/ui/FilePathTreeItem.java
+++ b/tute08/src/fs/ui/FilePathTreeItem.java
@@ -1,97 +1,47 @@
 package fs.ui;
 
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.DirectoryStream;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.nio.file.attribute.BasicFileAttributes;
+import fs.model.Expandable;
+import fs.model.Inode;
 import javafx.scene.control.TreeItem;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;

+/**
+ * TreeItem's are the controller to the view TreeCell.
+ */
 public class FilePathTreeItem extends TreeItem<String> {
-    public static Image folderCollapseImage = new Image(
-            ClassLoader.getSystemResourceAsStream("fs/resources/folder.png"));
-    public static Image folderExpandImage = new Image(
-            ClassLoader.getSystemResourceAsStream("fs/resources/folder-open.png"));
-    public static Image fileImage = new Image(ClassLoader.getSystemResourceAsStream("fs/resources/text-x-generic.png"));
+    private Inode inode;
 
-    private String fullPath;
+    public FilePathTreeItem(Inode inode) {
+        super(inode.getPath());
+        this.inode = inode;
 
-    public String getFullPath() {
-        return (this.fullPath);
-    }
-
-    private boolean isDirectory;
-
-    public boolean isDirectory() {
-        return this.isDirectory;
-    }    
+        this.setGraphic(new ImageView(new Image(
+            ClassLoader.getSystemResourceAsStream("fs/resources/" + inode.getIcon(false)))));
+        this.setValue(String.format("%s (%f KiB)", inode.getName(), inode.getFileSize() / 1024.0));
 
-    @Override
-    public boolean isLeaf() {
-        return !isDirectory();
-    }
-
-    public FilePathTreeItem(Path file) {
-        super(file.toString());
-        this.fullPath = file.toString();
+        addEventHandler(TreeItem.branchCollapsedEvent(), (ev) -> {
+            ImageView iv = (ImageView) getGraphic();
+            // in reality you would probably cache these images for performance reasons...
+            iv.setImage(new Image(ClassLoader.getSystemResourceAsStream("fs/resources/" + inode.getIcon(false))));
+        });
 
-        // test if this is a directory and set the icon
-        if (Files.isDirectory(file)) {
-            this.isDirectory = true;
-            this.setGraphic(new ImageView(folderCollapseImage));
-        } else {
-            this.isDirectory = false;
-            this.setGraphic(new ImageView(fileImage));
-        }
+        if (inode instanceof Expandable) {
+            this.addEventHandler(TreeItem.branchExpandedEvent(), (ev) -> {
+                ImageView iv = (ImageView) getGraphic();
+                // in reality you would probably cache these images for performance reasons...
+                iv.setImage(new Image(ClassLoader.getSystemResourceAsStream("fs/resources/" + inode.getIcon(true))));
+
+                // after expansion we may need to render some new cells
+                for (Inode innerInode : ((Expandable)inode).expand()) {
+                    getChildren().add(new FilePathTreeItem(innerInode));
+                }
+            });
 
-        // set the value
-        if (!fullPath.endsWith(File.separator)) {
-            // set the value (which is what is displayed in the tree)
-            String value = file.toString();
-            int indexOf = value.lastIndexOf(File.separator);
-            if (indexOf > 0) {
-                this.setValue(value.substring(indexOf + 1));
-            } else {
-                this.setValue(value);
-            }
+            this.addEventHandler(TreeItem.childrenModificationEvent(), (ev) -> {
+                this.setValue(String.format("%s (%f KiB)", inode.getName(), inode.getFileSize() / 1024.0));
+            });
         }
+    }
 
-        addEventHandler(TreeItem.<String>branchExpandedEvent(), (ev) -> {
-            FilePathTreeItem source = (FilePathTreeItem) ev.getSource();
-            if (source.isDirectory() && source.isExpanded()) {
-                ImageView iv = (ImageView) source.getGraphic();
-                iv.setImage(folderExpandImage);
-            }
-            try {
-                if (source.getChildren().isEmpty()) {
-                    Path path = Paths.get(source.getFullPath());
-                    BasicFileAttributes attribs = Files.readAttributes(path, BasicFileAttributes.class);
-                    if (attribs.isDirectory()) {
-                        DirectoryStream<Path> dir = Files.newDirectoryStream(path);
-                        for (Path innerFile : dir) {
-                            FilePathTreeItem treeNode = new FilePathTreeItem(innerFile);
-                            source.getChildren().add(treeNode);
-                        }
-                    }
-                } else {
-                    // if you want to implement rescanning a directory for changes this would be the
-                    // place to do it
-                }
-            } catch (IOException x) {
-                x.printStackTrace();
-            }
-        });
-
-        this.addEventHandler(TreeItem.<String>branchCollapsedEvent(), (ev) -> {
-            FilePathTreeItem source = (FilePathTreeItem) ev.getSource();
-            if (source.isDirectory() && !source.isExpanded()) {
-                ImageView iv = (ImageView) source.getGraphic();
-                iv.setImage(folderCollapseImage);
-            }
-        });
+    @Override
+    public boolean isLeaf() {
+        return !(inode instanceof Expandable);
     }
 }
